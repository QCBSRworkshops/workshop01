[["index.html", "Workshop 1: Introduction to R QCBS R Workshop Series Preface 0.1 Code of conduct 0.2 Contributors 0.3 Contributing", " Workshop 1: Introduction to R QCBS R Workshop Series Developed and maintained by the contributors of the QCBS R Workshop Series1 2021-07-27 20:56:24 Preface The QCBS R Workshop Series is a series of 10 workshops that walks participants through the steps required to use R for a wide array of statistical analyses relevant to research in biology and ecology. These open-access workshops were created by members of the QCBS both for members of the QCBS and the larger community. The content of this workshop has been peer-reviewed by several QCBS members. If you would like to suggest modifications, please contact the current series coordinators, listed on the main Github page. 0.1 Code of conduct The QCBS R Workshop Series and the QCBS R Symposium are venues dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. Participants, presenters and organizers of the workshop series and other related activities accept this Code of Conduct when being present at any workshop-related activities. We do not tolerate behaviour that is disrespectful or that excludes, intimidates, or causes discomfort to others. We do not tolerate discrimination or harassment based on characteristics that include, but are not limited to, gender identity and expression, sexual orientation, disability, physical appearance, body size, citizenship, nationality, ethnic or social origin, pregnancy, familial status, genetic information, religion or belief (or lack thereof), membership of a national minority, property, age, education, socio-economic status, technical choices, and experience level. It applies to all spaces managed by or affiliated with the workshop, including, but not limited to, workshops, email lists, and online forums such as GitHub, Slack and Twitter. 0.1.1 Expected behaviour All participants are expected to show respect and courtesy to others. All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all workshop events and platforms: Use welcoming and inclusive language Be respectful of different viewpoints and experiences Gracefully accept constructive criticism Focus on what is best for the community Show courtesy and respect towards other community members 0.1.2 Unacceptable behaviour Examples of unacceptable behaviour by participants at any workshop event/platform include: written or verbal comments which have the effect of excluding people on the - basis of membership of any specific group; causing someone to fear for their safety, such as through stalking or intimidation; violent threats or language directed against another person; the display of sexual or violent images; unwelcome sexual attention; nonconsensual or unwelcome physical contact; insults or put-downs; sexist, racist, homophobic, transphobic, ableist, or exclusionary jokes; incitement to violence, suicide, or self-harm; continuing to initiate interaction (including photography or recording) with - someone after being asked to stop; publication of private communication without consent. 0.2 Contributors Originally developed by: Sylvain Christin, Cédric Frenette Dussault, Dalal Hanna. Contributed with changes to the presentation: Contributed with changes to the written material: Contributed by reporting issues and suggesting modifications: 0.3 Contributing Under construction. The QCBS R Workshop Series is part of the Québec Centre for Biodiversity Science, and is maintained by the series coordinators and graduent student, postdoctoral, and research professional members. The contributors for this workshop can be accessed here.↩︎ "],["learning-objectives.html", "Chapter 1 Learning objectives", " Chapter 1 Learning objectives In this introductory R Workshop you will learn what R open-source statistical software is, why you should absolutely start using it, and all the first steps to help you get started in R. We will show you how R can act as a calculator, teach you about the various types of objects in R, show you how to use functions and load packages, and find all the resources you need to get help. If any of this sounds obscure, don’t worry! By the end of this workshop, we will have accomplished these objectives: Understand what R and RStudio are; Use R as a calculator; Manipulate objects in R; Install, use an R package and get help. "],["preparing-for-the-workshop.html", "Chapter 2 Preparing for the workshop", " Chapter 2 Preparing for the workshop Before you can effectively start this workshop, you will need to install the R and RStudio softwares on your computer. To install R, go to http://www.r-project.org/ and click on download. You will have to select a mirror site (usually one close to you) and select your platform (OS X, Windows or Linux). Download the file and launch it to complete the installation. You don’t have to change the default settings. To install RStudio, go to http://www.rstudio.com/ and select RStudio from the Products tab. Click on the open source version of RStudio Desktop and select your platform to download it. Launch the file you just downloaded to complete the installation. Again, you can keep the default settings. You can also download the R script for this workshop: R Script "],["recognizing-and-using-r-and-rstudio.html", "Chapter 3 Recognizing and using R and RStudio 3.1 What is R? 3.2 Why use R? 3.3 Using RStudio 3.4 Challenge 1", " Chapter 3 Recognizing and using R and RStudio 3.1 What is R? R is an open source programming language and environment. It is designed for data analysis, graphical display and data simulations. It is one of the world’s leading statistical programming environment. 3.2 Why use R? R is open-source! This means that it is free, and constantly being updated and improved. It is compatible. R works on most existing operating systems. R can help you create tables, produce graphs and do your statistics, all within the same program. So with R, there is no need to use more than one program to manage data for your publications. Everything can happen in one single program. More and more scientists are using R every year. This means that its capacities are constantly growing and will continue to increase over time. This also means that there is a big online community of people that can help with any problems you have in R. 3.3 Using RStudio RStudio is an integrated development environment (IDE) for R. Basically, it’s a place where you can easily use the R language, visualize tables and figures and even run all your statistical analyses. We recommend using it instead of the traditional command line as it provides great visual aid and a number of useful tools that you will learn more about over the course of this workshop. 3.4 Challenge 1 Open RStudio RStudio logo Note for Windows users: If the restriction “unable to write on disk” appears when you try to open R-Studio, right-click on your R-Studio icon and chose:“Execute as administrator” to open the program. The console When you open RStudio, the first thing that you see to the left of the screen is the “console”. This is where we will be working for the rest of this Introduction to R workshop. RStudio console Text in the console typically looks like this: &gt; output [1] &quot;This is the output&quot; Note 1: You always have to push “enter” for the input to run in the console. Note 2: People often wonder what the brackets in front of the output mean. They are there to help you locate “where” you are in the output. For example, if you ask R to output numbers between 1 and 10 and the output is on 2 rows, the bracket at the start of the 2nd row will help you understand at which value of the output you are situated: [1] 1 2 3 4 5 [6] 6 7 8 9 10 "],["using-r-as-a-calculator.html", "Chapter 4 Using R as a calculator 4.1 Challenge 2 4.2 Challenge 3 4.3 Challenge 4", " Chapter 4 Using R as a calculator 4.1 Challenge 2 Use R to calculate the following skill testing question: 2 + 16 x 24 - 56 2 + 16 * 24 - 56 ## [1] 330 4.2 Challenge 3 Use R to calculate the following skill testing question: 2 + 16 x 24 - 56 / (2 + 1) - 457 Pay attention to the order of operations when thinking about this question! 2 + 16 * 24 - 56/(2 + 1) - 457 ## [1] -89.66667 Note that R always follows the order of priorities. R TIP Try using the “up” and “down” arrows to reproduce previous commands. These keys actually allow you to scroll through your command history. This is a useful tool to go back and see what command you ran and if you might have made a mistake in it. This is always a useful tool to quickly alter previous commands you ran and to re-run them in a slightly different way. Use arrow keys to go back to previous commands. 4.3 Challenge 4 What is the area of a circle with a radius of 5 cm? Recall : \\({circle = \\pi r^2}\\) &gt; 3.1416 * 5^2 [1] 78.54 R also has many built-in constants like pi. &gt; pi * 5^2 [1] 78.54 ++ "],["manipulating-objects-in-r.html", "Chapter 5 Manipulating objects in R 5.1 Objects 5.2 Data types and structure 5.3 Indexing", " Chapter 5 Manipulating objects in R 5.1 Objects You have learned so far how to use R as a calculator to obtain various numerical values. However, it can get tiresome to always write the same code down in the R console, especially if you have to use some values repeatedly. This is where the concept of object becomes useful. R is an object-oriented programming language. What this means is that we can allocate a name to values we’ve created to save them in our workspace. An object is composed of three parts: 1) a value we’re interested in, 2) an identifier and 3) the assignment operator. The value can be almost anything we want: a number, the result of a calculation, a string of characters, a data frame, a plot or a function. The identifier is the name you assign to the value. Whenever you want to refer to this value, you simply type the identifier in the R console and R will return its value. Identifiers can include only letters, numbers, periods and underscores, and should always begin with a letter. The assignment operator resembles an arrow (&lt;-) and is used to link the value to the identifier. The following code clarifies these ideas: # Let&#39;s create an object called mean_x. # The # symbol is used in R to indicate comments. It is not processed by R. # It is important to add comments to code so that it can be understood and used by other people. mean_x &lt;- (2 + 6) / 2 # Typing its name will return its value. &gt; mean_x [1] 4 Here, (2 + 6) / 2 is the value you want to save as an object. The identifier mean_x is assigned to this value. Typing mean_x returns the value of the calculation (i.e. 4). You have to be scrupulous when typing the identifier because R is case-sensitive: writing mean_x is not the same as writing MEAN_X. You can see that the assignment operator &lt;- creates an explicit link between the value and the identifier. It always points from the value to the identifier. Note that it is also possible to use the equal sign = as the assignment operator but it is preferable not to because it is also used for other operations in R, which can cause problems when using it for assignment. Finally, imagine that the operator &lt;- and = follow their own order of priorities. &gt; y &lt;- x = 5 Error in y &lt;- x = 5 : object &#39;y&#39; not found &gt; y = x &lt;- 5 &gt; y [1] 5 &gt; x [1] 5 5.1.0.1 Good practices in R code Name Try having short and explicit names for your variables. Naming a variable var is not very informative. Use an underscore (_), or a dot (.) to separate words within a name and try to be consistent! Avoid using names of existing functions and variables (e.g., c, table, T, etc.) Space Add spaces around all operators (=, +, -, &lt;-, etc.) to make the code more readable. Always put a space after a comma, and never before (like in regular English). 5.1.0.1.1 CHALLENGE 5 Create an object with a value of 1 + 1.718282 (Euler’s number) and name it euler_value Challenge 5: Solution &gt; euler_value &lt;- 1 + 1.718282 5.1.0.1.2 CHALLENGE 6 Create an object (you decide the value) with a name that starts with a number. What happens? Challenge 6: Solution An object name that starts with a number will return the following error: unexpected symbol in \"your object name\". R TIP Using the Tab key allows auto-completion of names. It speeds up command entering and avoids spelling errors. For example, if you type eu and then press tab, you will see a list of objects or functions beginning with eu. Select euler_value (the object we just created) and press enter. The euler_value identifier now appears at the command line. 5.2 Data types and structure Using R to analyze your data is an important aspect of this software. Data comes in different forms and can be grouped in distinct categories. Depending on the nature of the values enclosed inside your data or object, R classifies them accordingly. The following figure illustrates common objects found in R. Types of objects in R The first object is a vector. It is one of the most common objects in R. A vector is an entity consisting of a list of related values. All values in a vector must be the same mode. The main modes in R are numeric, character and logical. Numeric vectors are made of numbers only. Character vectors include text strings or a mix of text strings and other modes. You need to use \"\" to delimit elements in a character vector. Logical vectors include TRUE/FALSE entries only. A vector with a single value (usually a constant) is called an atomic vector. Before we look at how to create different types of vectors, let’s have a look at the generic method of creating vectors. If you recall what you have just learned, you will first have to identify some value you want to put in a vector and then link it to an identifier with the assignment operator (i.e. create an object). When you have more than one value in a vector, you need a way to tell R to group all these values to create a vector. The trick here is to use the c() function. Don’t worry, you will learn about functions pretty soon in one of the following sections. For now, just remember to put your values between parentheses next to letter c() in this format: vector.name &lt;- c(value1, value2, value3, ...). The function c() means combine or concatenate. It is a quick and easy function so remember it! Now that you know the generic method to create a vector in R, let’s have a look at how to create different types of vectors. # Create a numeric vector with the c (which means combine or concatenate) function. # We will learn about functions soon! &gt; num_vector &lt;- c(1, 4, 3, 98, 32, -76, -4) # Create a character vector. Always use &quot;&quot; to delimit text strings! &gt; char_vector &lt;- c(&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;) # Create a logical or boolean vector. Don&#39;t use &quot;&quot; or R will consider this as text strings. &gt; bool_vector &lt;- c(TRUE, TRUE, FALSE) #It is also possible to use abbreviations for logical vectors. &gt; bool_vector2 &lt;- c(T, T, F) 5.2.0.0.1 CHALLENGE 7 Create a vector containing the first five odd numbers (starting from 1) and name it odd_n. Challenge 7: Solution &gt; odd_n &lt;- c(1, 3, 5, 7, 9) R TIP Use dput() function to obtain the reverse, i.e. the content of an object formatted as a vector. e.g. : &gt; odd_n &lt;- c(1, 3, 5, 7, 9) &gt; odd_n [1] 1 3 5 7 9 &gt; dput(odd_n) c(1, 3, 5, 7, 9) # The output can be copied-pasted to create a new object by using the structure() function &gt; structure(c(1, 3, 5, 7, 9)) This demonstration might not be that convincing, but keep in mind that it can be very useful when you’re manipulating data. These functions are really useful to provide a reproducible example for a question on Stack Overflow for instance (see one more application in the part about data frames)! What you have learned previously about calculations is also valid for vectors: vectors can be used for calculations. The only difference is that when a vector has more than 1 element, the operation is applied on all elements of the vector. The following example clarifies this. # Create two numeric vectors. &gt; x &lt;- 1:5 # An equivalent form is: x &lt;- c(1:5). &gt; y &lt;- 6 # Remember that the : symbol, when used with numbers, is the sequence operator. # It tells R to create a series of numbers increasing by 1. # Equivalent to this is x &lt;- c(1,2,3,4,5) # Let&#39;s sum both vectors. # 6 is added to all elements of the x vector. &gt; x + y [1] 7 8 9 10 11 # Let&#39;s multiply x by itself. &gt; x * y [1] 6 12 18 24 30 Another important type of object you will use regularly is the data frame. A data frame is a group of vectors of the same length (i.e. the same number of elements). Columns are always variables and rows are observations, cases, sites or replicates. Different modes can be saved in different columns (but always the same mode in a column). It is in this format that ecological data are usually stored. The following example shows a fictitious dataset representing 4 sites where soil pH and the number of plant species were recorded. There is also a “Treatment” variable (fertilized or not). Let’s have a look at the creation of a data frame. site_id soil_pH num_sp treatment A1.01 5.6 17 Fertilised A1.02 7.3 23 Fertilised B1.01 4.1 15 Not Fertilised B1.02 6.0 17 Not Fertilised # We first start by creating vectors. &gt; site_id &lt;- c(&quot;A1.01&quot;, &quot;A1.02&quot;, &quot;B1.01&quot;, &quot;B1.02&quot;) &gt; soil_pH &lt;- c(5.6, 7.3, 4.1, 6.0) &gt; num_sp &lt;- c(17, 23, 15, 7) &gt; treatment &lt;- c(&quot;Fert&quot;, &quot;Fert&quot;, &quot;No_fert&quot;, &quot;No_fert&quot;) # We then combine them to create a data frame with the data.frame function. my_df &lt;- data.frame(site_id, soil_pH, num_sp, treatment) # Visualise it! my_df ** R TIP** Here the dput() function in another example. &gt; dput(my_df) structure(list(site_id = c(&quot;A1.01&quot;, &quot;A1.02&quot;, &quot;B1.01&quot;, &quot;B1.02&quot; ), soil_pH = c(5.6, 7.3, 4.1, 6), num_sp = c(17, 23, 15, 7), treatment = c(&quot;Fert&quot;, &quot;Fert&quot;, &quot;No_fert&quot;, &quot;No_fert&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -4L)) # It&#39;s possible to rebuild the initial data frame (with some associated metadata as the class of variables) by copying and pasting the previous output: &gt; structure(list(site_id = c(&quot;A1.01&quot;, &quot;A1.02&quot;, &quot;B1.01&quot;, &quot;B1.02&quot; ), soil_pH = c(5.6, 7.3, 4.1, 6), num_sp = c(17, 23, 15, 7), treatment = c(&quot;Fert&quot;, &quot;Fert&quot;, &quot;No_fert&quot;, &quot;No_fert&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -4L)) Other types of objects include matrices, arrays and lists. A matrix is similar to a data frame except that all cells in the matrix must be the same mode. An array is similar to a matrix but can have more than two dimensions. Arrays are usually used for advanced computation like numerical simulations and permutation tests. A list is an aggregation of various types of objects. For example, a list could include a vector, a data frame and a matrix in the same object. 5.3 Indexing 5.3.0.1 Indexing a vector Typing an object’s name in R returns the complete object. But what if our object is a huge data frame with millions of entries? It can easily become confusing to identify specific elements of an object. R allows us to extract only part of an object. This is called indexing. We specify the position of values we want to extract from an object with brackets [ ]. The following code illustrates the concept of indexation with vectors. # Let&#39;s first create a numeric and a character vector. # There is no need to do this again if you already did it in the previous exercise! &gt; odd_n &lt;- c(1, 3, 5, 7, 9) # Extract the second element of the numeric vector. &gt; odd_n[2] [1] 3 # Extract the second and fourth elements of the numeric vector. &gt; odd_n[c(2, 4)] [1] 3 7 # Extract all but the two first elements of the numeric vector. &gt; odd_n[c(-1, -2)] [1] 5 7 9 # If you select a position that is not in the numeric vector &gt; odd_n[c(1,6)] [1] 1 NA # There is no sixth value in this vector so R returns a null value (i.e. NA) # NA stands for &#39;Not available&#39;. # You can use logical statement to select values. &gt; odd_n[odd_n &gt; 4] [1] 5 7 9 # Extract all elements of the character vector corresponding exactly to &quot;blue&quot;. &gt; char_vecteur[char_vecteur == &quot;blue&quot;] [1] &quot;bleu&quot; # Note the use of the double equal sign ==. 5.3.0.1.1 CHALLENGE 8 Extract the 4th value of the num_vector vector. Extract the 1st and 3rd values of the num_vector vector. Extract all values of the num_vector vector excluding the 2nd and 4th values. &gt; Challenge 8a: Indexing vectors| &gt; num_vector[4] [1] 3 Challenge 8b: Indexing vectors| &gt; num_vector[c(1, 3)] [1] 1 5 Challenge 8c: Indexing vectors| &gt; num_vector[c(-2, -4)] [1] 1 5 6 -2 4 5.3.0.1.2 CHALLENGE 9 Explore the difference between these 2 lines of code: &gt; char_vector == &quot;blue&quot; &gt; char_vector[char.vector == &quot;blue&quot;] Challenge 9: Differences between codes| In the first line of code you test a logical statement. For each entry in the “char_vector” vector, R checks whether the entry is exactly equal to “blue” or not and returns a TRUE/FALSE answer. The next subsection introduces you to logical statements. In the second line of code you ask R to extract all values within the “char_vector” vector that are exactly equal to “blue”. It is also possible to extract the “blue” value by assigning a logical value to each element of the vector. Of course, you have to know the position of the “blue” value inside the vector. &gt; char_vector[c(TRUE, FALSE, FALSE)] [1] &quot;blue&quot; # We specify which value is true, # i.e. the value we want R to return (the first one) # which corresponds to &quot;blue&quot;. 5.3.0.2 Indexing a data frame For data frames, the concept of indexation is similar, but we usually have to specify two dimensions: the row and column numbers. The R syntax is dataframe[row number, column number]. Here are a few examples of data frame indexation. Note that the first four operations are also valid for indexing matrices. # Let&#39;s reuse the data frame we created earlier (my_df) # Extract the 1st row of the data frame &gt; my_df[1, ] # Extract the 3rd columm &gt; my_df[, 3] # Extract the 2nd element of the 4th column &gt; my_df[2, 4] # Extract lines 2 to 4 &gt; my_df[c(2,4), ] # Extract the &quot;site_id&quot; column by referring directly to its name # The dollar sign ($) allows such an operation! &gt; my_df$site_id # Extract the &quot;site_id&quot; and &quot;soil_pH&quot; variables &gt; my_df[, c(&quot;site_id&quot;,&quot;soil_pH&quot;)] 5.3.1 A quick note on logical statements R gives you the possibility to test logical statements, i.e. to evaluate whether a statement is true or false. You can compare objects with the following logical operators: Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to == exactly equal to != not equal to x | y x OR y x &amp; y x AND y The following examples illustrate how to use these operators properly. # First, let&#39;s create two vectors for comparison. &gt; x2 &lt;- c(1:5) &gt; y2 &lt;- c(1, 2, -7, 4, 5). # Let&#39;s verify if the elements in x2 are greater or equal to 3. # R returns a TRUE/FALSE value for each element (in order). &gt; x2 &gt;= 3 [1] FALSE FALSE TRUE TRUE TRUE # Let&#39;s see if the elements of x2 are exactly equal to those of y2. &gt; x2 == y2 [1] TRUE TRUE FALSE TRUE TRUE # Is 3 not equal to 4? Of course! &gt; 3 != 4 [1] TRUE # Let&#39;s see which values in x2 are greater than 2 but smaller than 5. # You have to write x2 twice. # If you write x2 &gt; 2 &amp; &lt; 5, you will get an error message. &gt; x2 &gt; 2 &amp; x2 &lt; 5 [1] FALSE FALSE TRUE TRUE FALSE 5.4 5.4.0.0.1 CHALLENGE 10 Extract the num_sp column from my_df and multiply its values by the first four values of the num_vec vector. &gt; b) After that, write a statement that checks if the values you obtained are greater than 25. Refer to challenge 9 to complete this challenge. &gt; Challenge 10a: Indexing and multiplying| &gt; my_df$num.sp * num.vector[c(1:4)] [1] 17 92 45 686 # or &gt; my_df[, 3] * num_vector[c(1:4)] [1] 17 92 45 686 Challenge 10b: Logical statement| &gt; (my_df$num.sp * num.vector[c(1:4)]) &gt; 25 [1] FALSE TRUE TRUE FALSE "],["functions.html", "Chapter 6 Functions", " Chapter 6 Functions Most of the time with R, you will need to use functions to do what you want. Functions are tools that are there to simplify your life. They allow you to quickly execute operations on objects without having to write every mathematical step. Functions are usually pre-existing R code that are executed when used. They remove the need to create this code and to rewrite it every time you need it. To execute a function, you will need to call it. A function call is essentially a shortcut to the code of the function. To perform the function call you will need entry values called arguments (or sometimes parameters). After performing its operations, the function will then give you a return value. The command also must be structured properly, following the “grammar rules” of the R language (syntax). A function call is structured as follow: the name of the function, followed by parenthesis ( ). Inside the parenthesis, you insert all your arguments separated with commas. function_name(arg1, arg2, ...) Here an example: &gt; sum(1, 2) Arguments are values and the instructions the function needs to run. Objects can be passed into functions: &gt; a &lt;- 3 &gt; b &lt;- 5 &gt; sum(a, b) [1] 8 On the last line, the output that appears is the return value of the function. In this case, it is the sum of a and b, 8. 6.0.0.0.1 CHALLENGE 11 a) - Create a vector a that contains all numbers from 1 to 5 &gt; - Create an object b with value of 2 &gt; - Add a and b together using the basic + operator and save the result in an object called result_add &gt; - Add a and b together using the sum() function and save the result in an object called result_sum &gt; - Compare result_add and result_sum. Are they different? &gt; b) Add 5 to result_sum using the sum() function. &gt; ++++Challenge 11a: Calling functions| &gt; a &lt;- 1:5 &gt; b &lt;- 2 &gt; result_add &lt;- a + b &gt; result_sum &lt;- sum(a, b) &gt; result_add [1] 3 4 5 6 7 The operation on the vector adds 2 to each element. The result is a vector. &gt; result_sum [1] 17 The function sum() adds all values of a and b. It is the same as doing 1 + 2 + 3 + 4 + 5 + 2. The result is a number. ++++ ++++Challenge 11b: Calling functions| &gt; sum(result_sum, 5) [1] 22 ++++ 6.0.0.1 Arguments Arguments each have a name that can be provided during a function call. If the name is not provided, the order of the arguments does matter. If the name is provided, the order of the arguments does not matter. To provide an argument name during a function call, just enter it in the form name=value. log(8, base = 2) 6.0.0.1.1 CHALLENGE 12 plot(x, y) is a function that draws a graph of y as a function of x. It requires two arguments named x and y. What are the differences between the following lines? &gt; a &lt;- 1:100 &gt; b &lt;- a^2 &gt; plot(a, b) &gt; plot(b, a) &gt; plot(x = a, y = b) &gt; plot(y = b, x = a) ++++Challenge 12: Argument names| plot(a, b) Plots the graph of b as a function of a. plot(b, a) Plots the graph of a as a function of b.The argument names are not provided, the order of the arguments matters. plot(x = a, y = b) Plots the graph of b as a function of a, same as plot(a, b). plot(y = b, x = a) Plots the graph of b as a function of a. The argument names are provided, the order of the arguments does not matter. ++++ As a reference, here is a list of some of the most common R functions: sqrt, log, exp, max, min, sum, mean, sd, var, summary, plot, par, paste, format, head, length, str, names, typeof, class, attributes, library, ls, rm, setwd, getwd, file.choose, c, seq, rep, tapply, lapply, aggregate, merge, cbind, rbind, unique, help (or ?), help.search (or ??), help.start "],["installing-and-using-r-packages.html", "Chapter 7 Installing and using R packages", " Chapter 7 Installing and using R packages 7.0.1 Packages Packages are a grouping of functions and/or datasets that share a similar theme. Ex : statistics, spatial analysis, plotting... Everyone can develop packages and make them available to other R users. They are usually available through the Comprehensive R Archive Network (CRAN)http://cran.r-project.org/web/packages/ Currently, more than 16000 packages are publicly available. To install packages on your computer, use the function install.packages() &gt; install.packages(&quot;ggplot2&quot;) Installing a package is required only once (but updated from time to time) but it is not enough to use its functions. You need to load the package once per R session before using it with the library() function. Let’s try using the function qplot() found in the ggplot2 package we just installed. &gt; qplot(1:10, 1:10) The package was correctly installed but we didn’t load it. Therefore, the execution of this code leads to the following error: Error: could not find function \"qplot\" To be able to use the function qplot() we need to load the package ggplot2 before. &gt; library(&quot;ggplot2&quot;) &gt; qplot(1:10, 1:10) Now the function is found and the execution of our code leads to the following graph: It is good practice to unload packages once we are done with them because it might conflict with other packages. Unloading a package is done with the detach() function and by specifying that it is a package: &gt; detach(package:ggplot2) 7.0.2 Getting help 7.0.2.1 Getting help with functions We’ve seen so far that R is really great and offers us a lot of functions to work with. Among all these functions, there are probably some that can do what we want. Now the problem is: how to find them? To find a function that does something specific in your installed packages, you can use the operator ?? (or the help.search() function). To perform a search, just type ?? and what you want to search. For example, let’s say we want to create a sequence of odd numbers between 0 and 10. We will search in our packages all functions with the word sequence in them. &gt; ??sequence This opens the following window (Note: the search result may vary depending on the packages installed on your computer): The search result contains two columns: On the left, we have the name of the function and the package in which we can find it in the format package_name::function_name On the right, we have the description of the function Usually, functions have names that are representative of what they do. This makes it easier to use. Remember this if you ever start to write your own functions! Here the result that interests us is base::seq, i.e. the function seq that can be found in the base package and that generates sequences. Note: the base package contains basic functions that load with R when you launch it and are therefore always available. 7.0.2.2 Help page of functions We will use the seq() function to generate our sequence. But how does it work? What does it do? How should I use it? To answer all these questions, we’ll try to find the help page of the function. For that, we will use the ? operator (or the help() function). To access the help page of a function, we enter the commage as follow: ?function_name So for the seq() function, we type: &gt; ?seq This opens the following page: A help page usually contains the folowing elements and sections (Note: sometimes, the same help page is used for more than one function): On the top left corner, the name of the function and the package it belongs to in the format function{package} Description: a short description of the function(s) Usage: how to use the function(s), especially what are the name and order of the arguments. If a value is specified near an argument name, it means that a default value has been defined for this argument, which makes it optional to specify another value. If the argument is missing, the default value will be used. For example, if we do not provide a from argument, the sequence will automatically start from 1 Arguments: A detailed description of all the arguments and what is expected or required for the function to work correctly. Be careful! Here are listed all the arguments for all the functions described on the help page; not all arguments are available for all listed functions. For example, in this help page, the arguments from and to are not available for the function seq_along(). Details: Provide in depth details of the inner working of the function(s). Some specific cases can be discussed here or additionnal information provided. Value: Explains what the return value of the function is. References: Sources used as basis for the function or interesting readings on the subject. See Also: Related functions that can sometimes be of use, especially when searching for the correct function for our needs. Examples: Some examples on how to use the function(s) 7.0.2.2.1 Challenge 13 a) Create a sequence of even numbers from 0 to 10 using the seq function &gt; b) - Create an unsorted vector of your favourite numbers. - Find out how to sort it using ?sort. - Sort your vector in reverse order. ++++ Challenge 13a | &gt; seq(from = 0, to = 10, by = 2) [1] 0 2 4 6 8 10 We could also have written &gt; seq(0, 10, 2) [1] 0 2 4 6 8 10 ++++ ++++ Challenge 13b | &gt; numbers &lt;- c(2, 4, 22, 6, 26) &gt; sort(numbers, decreasing = TRUE) [1] 26 22 6 4 2 7.0.2.3 Getting help on the Web Usually, your best source of information will be your favorite search engine (Google, Bing, Yahoo, etc.) Here are some tips on how to use them efficiently: Search in English Use the keyword “R” at the beginning of your search Define precisely what you are looking for Learn to read discussion forums. Chances are other people already had the same problem and asked about it. Create your account on forums where questions about R are often asked like stackexchange. Don’t hesitate to search again with different keywords! 7.0.2.3.1 Challenge 14 Find the appropriate functions to perform the following operations &gt; a) Square root b) Calculate the mean of numbers c) Combine two dataframes by columns d) List available objects ++++ Challenge 14 | a) sqrt b) mean c) cbind d) ls "],["summary.html", "Chapter 8 Summary", " Chapter 8 Summary R is… In the next workshop, … "],["additional-resources.html", "Chapter 9 Additional resources", " Chapter 9 Additional resources 9.0.0.1 Cheat Sheets https://www.rstudio.com/resources/cheatsheets/ These cheat sheets are also directly available in RStudio (Help -&gt; Cheat Sheets) 9.0.0.2 A few books R for Dummies A Handbook of Statistical Analyses using R R in Action Introductory Statistics in R A Beginner’s Guide to R The R Book 9.0.0.3 A few useful links r4ds.had.co.nz/index.html |https:cran.r-project.org/doc/manuals/r-release/R-intro.html]] * \\[\\[http:*cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf\\|http:*cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf\\]] * \\[\\[http:*statmethods.net/\\|http:*statmethods.net/\\]] * \\[\\[https:*support.rstudio.com/hc/en-us/categories/200035113-Documentation\\|https:*support.rstudio.com/hc/en-us/categories/200035113-Documentation\\]] * [[http:cookbook-r.com/|http://cookbook-r.com/](http://r4ds.had.co.nz/index.html) "],["references.html", "Chapter 10 References", " Chapter 10 References "]]
